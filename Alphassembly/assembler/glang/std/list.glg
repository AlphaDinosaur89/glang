include "asm.glg"
include "core.glg"
include "types.glg"
include "string.glg"

def setat(list, idx, value):
    asm_push(value)
    asm_push(idx)
    asm_push(list)
    return asm_bcall(7)
end

def getat(list, idx):
    asm_push(idx)
    asm_push(list)
    return asm_bcall(6)
end

def append(list, val):
    asm_push(val)
    asm_push(list)
    return asm_bcall(8)
end

def pop(list):
    asm_push(list)
    return asm_bcall(9)
end

def len(list):
    asm_push(list)
    return asm_bcall(10)
end

def getrange(list, start, endn):
	if endn < start:
		print("End must be bigger than start in getrange function")
		exit(1)
	end
	
	var l = []
	for i = start to endn+1:
		var l = append(l, list[i])
	end
	
	return l
end

def contains(val, val2):
	if type(val) == types.str:
		if type(val2) == types.str:
			if indexOf(val, val2) != -1:
				return true
			end
		elif type(val2) == types.list:
			var a = val
			var b = val2
			
			for i = 0 to len(b):
				if b[i] == a:
					return true
				end
			end
		end
	elif type(val) == types.list:
		for i = 0 to len(val):
			var a = val[i]
			if a == val2:
				return true
			end
		end
	end
	
	return false
end
